# -*- coding: utf-8 -*-
"""Fbref Scraping

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13jpipio_b0lMbZU8D78-GIPyUW8B3LRg
"""

#Use this code to scrape stats from fbref (multiple tables) (only available ones)

pip install --upgrade LanusStats

import LanusStats as ls

ls.get_available_pages()

ls.get_available_leagues('Fbref')

ls.get_available_season_for_leagues('Fbref','Big 5 European Leagues')

Fbref= ls.Fbref()

Fbref.get_player_season_stats('stats','Big 5 European Leagues','2023-2024')

Fbref.get_player_season_stats('keepers', 'Big 5 European Leagues','2023-2024')

Fbref.get_player_season_stats('keepersadv', 'Big 5 European Leagues','2023-2024')

Fbref.get_player_season_stats('shooting','Big 5 European Leagues','2023-2024')

Fbref.get_player_season_stats('passing','Big 5 European Leagues','2023-2024')

Fbref.get_player_season_stats('passing_types','Big 5 European Leagues','2023-2024')

Fbref.get_player_season_stats('gca','Big 5 European Leagues','2023-2024')

Fbref.get_player_season_stats('defense','Big 5 European Leagues','2023-2024')

Fbref.get_player_season_stats('possession','Big 5 European Leagues','2023-2024')

Fbref.get_player_season_stats('playingtime','Big 5 European Leagues','2023-2024')

Fbref.get_player_season_stats('misc','Big 5 European Leagues','2023-2024')

pip install pandas openpyxl

import pandas as pd

# Suponiendo que tienes una función que puede obtener DataFrames para cada nombre de tabla
def get_data_for_table(table_name):
    # Aquí deberías tener el código que obtiene los datos, por ejemplo, de una base de datos o archivo
    # De momento, retornaré un DataFrame vacío
    return pd.DataFrame()

# Lista de nombres de tablas
table_names = ['stats', 'keepers', 'keepersadv', 'passing_types', 'gca', 'defense', 'possession', 'playingtime', 'misc']

# Crear un objeto ExcelWriter para escribir en un archivo Excel
with pd.ExcelWriter('SportsData.xlsx', engine='openpyxl') as writer:
    for table_name in table_names:
        # Obtener datos para la tabla actual
        data = get_data_for_table(table_name)

        # Guardar los datos en una hoja de Excel, nombrando la hoja con el nombre de la tabla
        data.to_excel(writer, sheet_name=table_name, index=False)

print("Las tablas han sido guardadas en el archivo Excel 'SportsData.xlsx'")

import pandas as pd
import os

# Lista de nombres de tablas
table_names = ['stats', 'keepers', 'keepersadv', 'shooting','passing','passing_types', 'gca', 'defense', 'possession', 'playingtime', 'misc']

# Diccionario para almacenar los DataFrames
dataframes = {}

# Suponiendo que usas fbref.get_player_season_stats para obtener los DataFrames
# Cargar las tablas en el diccionario
for table_name in table_names:
    dataframes[table_name] = Fbref.get_player_season_stats(table_name, 'Big 5 European Leagues', '2021-2022')

# Definir el nombre del archivo Excel
file_path = 'Jugadores_5_Grandes_Ligas_Equipos.xlsx'

# Escribir los DataFrames a un archivo Excel con diferentes hojas
with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
    for sheet_name, dataframe in dataframes.items():
        dataframe.to_excel(writer, sheet_name=sheet_name, index=False)

print("Archivo Excel guardado con éxito.")

import pandas as pd
import os

# Lista de nombres de tablas
table_names = ['passing']
'stats', 'keepers', 'keepersadv', 'shooting','passing','passing_types', 'gca', 'defense', 'possession', 'playingtime', 'misc']

# Diccionario para almacenar los DataFrames
dataframes = {}

# Suponiendo que usas fbref.get_player_season_stats para obtener los DataFrames
# Cargar las tablas en el diccionario
for table_name in table_names:
    dataframes[table_name] = Fbref.get_teams_season_stats('passing', 'Premier League','2023-2024')

# Definir la ruta del directorio donde se guardarán los archivos CSV
directory = 'Premier League_statsP'

# Crear el directorio si no existe
if not os.path.exists(directory):
    os.makedirs(directory)

# Escribir los DataFrames a archivos CSV
for table_name, dataframe in dataframes.items():
    file_path = os.path.join(directory, f'{table_name}.csv')
    dataframe.to_csv(file_path, index=False)

print("Archivos CSV guardados con éxito.")

